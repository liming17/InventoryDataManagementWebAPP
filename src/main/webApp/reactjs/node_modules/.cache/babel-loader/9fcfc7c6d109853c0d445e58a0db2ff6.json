{"ast":null,"code":"import { FETCH_PRODUCT_REQUEST, FETCH_PRODUCT_SUCCESS, FETCH_PRODUCT_FAILURE, ADD_PRODUCT_AMOUNT, SUB_PRODUCT_AMOUNT, CHANGE_PRODUCT_AMOUNT, POST_ORDER_INFO_SUCCESS } from './OrderType';\nconst initialState = {\n  products: [],\n  addedProducts: [],\n  size: 5,\n  page: 1,\n  totalPage: 0,\n  order: {},\n  error: ''\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PRODUCT_REQUEST:\n      return { ...state\n      };\n\n    case FETCH_PRODUCT_SUCCESS:\n      let setDefaultAmount = JSON.parse(JSON.stringify(action.payload.content));\n      setDefaultAmount.map(product => {\n        product.total_amount = 0;\n      });\n      return { ...state,\n        products: setDefaultAmount,\n        page: action.page,\n        totalPage: action.payload.totalPages\n      };\n\n    case FETCH_PRODUCT_FAILURE:\n      return { ...state,\n        products: [],\n        error: action.payload\n      };\n\n    case ADD_PRODUCT_AMOUNT:\n      let addedProduct = state.products.find(product => product.id === action.id);\n      let existedAddedProduct = state.addedProducts.find(product => action.id === product.id);\n\n      if (existedAddedProduct) {\n        addedProduct.amount += 1;\n        existedAddedProduct.amount += 1;\n        return { ...state\n        };\n      } else {\n        addedProduct.amount += 1;\n        return { ...state,\n          addedProducts: [...state.addedProducts, addedProduct]\n        };\n      }\n\n    case SUB_PRODUCT_AMOUNT:\n      let subProduct = state.products.find(product => product.id === action.id);\n      let existedSubProduct = state.addedProducts.find(product => action.id === product.id);\n\n      if (subProduct.amount === 1) {\n        subProduct.amount -= 1;\n        let newProduct = state.addedProducts.filter(product => product.id !== action.id);\n        return { ...state,\n          addedProducts: newProduct\n        };\n      } else {\n        subProduct.amount -= 1;\n        existedSubProduct.amount -= 1;\n        return { ...state\n        };\n      }\n\n    case CHANGE_PRODUCT_AMOUNT:\n      let changedProduct = state.products.find(product => product.id === action.id);\n      let existedProduct = state.addedProducts.find(product => action.id === product.id);\n\n      if (action.id === 0) {\n        changedProduct.amount = action.amount;\n        let newProduct = state.addedProducts.filter(product => product.id !== action.id);\n        return { ...state,\n          addedProducts: newProduct\n        };\n      } else {\n        if (existedProduct) {\n          changedProduct.amount = action.amount;\n          existedProduct.amount = action.amount;\n          return { ...state\n          };\n        } else {\n          changedProduct.amount = action.amount;\n          return { ...state,\n            addedProducts: [...state.addedProducts, changedProduct]\n          };\n        }\n      }\n\n    case POST_ORDER_INFO_SUCCESS:\n      return { ...state,\n        order: action.order\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/apple/Downloads/Neo/src/main/webApp/reactjs/src/services/order/OrderReducer.js"],"names":["FETCH_PRODUCT_REQUEST","FETCH_PRODUCT_SUCCESS","FETCH_PRODUCT_FAILURE","ADD_PRODUCT_AMOUNT","SUB_PRODUCT_AMOUNT","CHANGE_PRODUCT_AMOUNT","POST_ORDER_INFO_SUCCESS","initialState","products","addedProducts","size","page","totalPage","order","error","reducer","state","action","type","setDefaultAmount","JSON","parse","stringify","payload","content","map","product","total_amount","totalPages","addedProduct","find","id","existedAddedProduct","amount","subProduct","existedSubProduct","newProduct","filter","changedProduct","existedProduct"],"mappings":"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","sourcesContent":["import  {FETCH_PRODUCT_REQUEST,FETCH_PRODUCT_SUCCESS,FETCH_PRODUCT_FAILURE,\n    ADD_PRODUCT_AMOUNT,SUB_PRODUCT_AMOUNT,CHANGE_PRODUCT_AMOUNT,\n    POST_ORDER_INFO_SUCCESS} from './OrderType';\n\nconst initialState = {\n    products: [],\n    addedProducts:[],\n    size:5,\n    page: 1,\n    totalPage:0,\n    order:{},\n    error: ''\n};\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type){\n        case FETCH_PRODUCT_REQUEST:\n            return{\n                ...state\n            };\n        case FETCH_PRODUCT_SUCCESS:\n            let setDefaultAmount = JSON.parse(JSON.stringify(action.payload.content));\n            setDefaultAmount.map((product)=>{product.total_amount=0;});\n            return{\n                ...state,\n                products: setDefaultAmount,\n                page: action.page,\n                totalPage : action.payload.totalPages\n            };\n        case FETCH_PRODUCT_FAILURE:\n            return{\n                ...state,\n                products: [],\n                error: action.payload\n            };\n        case ADD_PRODUCT_AMOUNT:\n            let addedProduct= state.products.find(product=> product.id === action.id);\n            let existedAddedProduct= state.addedProducts.find(product=> action.id === product.id);\n\n            if(existedAddedProduct){\n                addedProduct.amount += 1; \n                existedAddedProduct.amount += 1;\n                return {...state}\n            }else{\n                addedProduct.amount += 1; \n                return{\n                    ...state,\n                    addedProducts:[...state.addedProducts,addedProduct]\n                }\n            }\n        case SUB_PRODUCT_AMOUNT:\n            let subProduct= state.products.find(product=> product.id === action.id);\n            let existedSubProduct= state.addedProducts.find(product=> action.id === product.id);\n\n            if(subProduct.amount === 1){\n                subProduct.amount -= 1; \n                let newProduct = state.addedProducts.filter(product=>product.id !== action.id)\n                return {\n                    ...state,\n                    addedProducts:newProduct\n                }\n            }else{\n                subProduct.amount -= 1; \n                existedSubProduct.amount -= 1;\n                return{\n                    ...state\n                }\n            }\n            case CHANGE_PRODUCT_AMOUNT:\n                let changedProduct= state.products.find(product=> product.id === action.id);\n                let existedProduct= state.addedProducts.find(product=> action.id === product.id);\n                if(action.id === 0){\n                    changedProduct.amount = action.amount;\n                    let newProduct = state.addedProducts.filter(product=>product.id !== action.id);\n                    return{\n                        ...state,\n                        addedProducts:newProduct\n                    }\n\n                }else{\n                    if(existedProduct){\n                        changedProduct.amount = action.amount;\n                        existedProduct.amount = action.amount;\n                        return{\n                            ...state\n                            }\n                    }else{\n                        changedProduct.amount = action.amount;\n                        return{\n                            ...state,\n                            addedProducts:[...state.addedProducts,changedProduct]\n                        }\n\n                    }\n                }\n            case POST_ORDER_INFO_SUCCESS:\n                return{\n                    ...state,\n                    order:action.order\n                }\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}