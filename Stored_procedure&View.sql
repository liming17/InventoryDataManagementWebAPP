 -- Given a month, check the monthly sales record for each salesperson and calculate bonus
 DELIMITER //
 
CREATE PROCEDURE GetSalespersonBonus(
    IN INPUT_MONTH TINYINT,
    IN BOUNUS_RATE DECIMAL(3,2)
)
BEGIN

	 SELECT e.EMP_NUM, concat(e.EMP_FNAME,e.EMP_LNAME) as EMP_NAME,SUM(o.AMOUNT*p.SALE_PRICE) AS TOTAL_SALE,SUM(o.AMOUNT*p.SALE_PRICE)*BOUNUS_RATE AS BONUS
	 FROM  SALES_ORDER s LEFT JOIN  ORDER_INFO i ON s.ORDER_ID=i.ORDER_ID
	 LEFT JOIN ORDER_PRODUCT o  ON  i.ORDER_ID=o.ORDER_ID
	 LEFT JOIN PRODUCT_LIST p ON p.PRODUCT_ID=o.PRODUCT_ID
	 RIGHT JOIN  EMPLOYEE e  ON e.EMP_NUM=i.EMP_NUM
	 WHERE MONTH(i.ORDER_ISSUE_DATE)=INPUT_MONTH OR MONTH(i.ORDER_ISSUE_DATE)<=>NULL
	 GROUP BY e.EMP_NUM;
 
END //
 
DELIMITER ;
 

 
  -- Given a keyword, search the product
DELIMITER //
 
CREATE PROCEDURE SearchProductByName(
    IN KEYWORD VARCHAR(50)
)
BEGIN

	SELECT *
    FROM PRODUCT_LIST
    WHERE PRODUCT_NAME LIKE concat('%',KEYWORD,'%') ;

END //
 
DELIMITER ;
 
 
 
 -- SEARCH SHOES BY SIZE
 
DELIMITER //
 
CREATE PROCEDURE SearchShoesBySize(
    IN SIZE_RANGE_MIN TINYINT,
    IN SIZE_RANGE_MAX TINYINT
)
BEGIN

   SELECT *
   FROM PRODUCT_LIST
   WHERE PRODUCT_NAME LIKE "%SHOE%" AND CAST(SUBSTRING_INDEX(PRODUCT_SIZE, '-', 1) AS UNSIGNED) <=SIZE_RANGE_MAX AND CAST(SUBSTRING_INDEX(PRODUCT_SIZE, '-', -1) AS UNSIGNED) >= SIZE_RANGE_MIN;

END //
 
DELIMITER ;


 
 -- look up the profit of each product
 
 DELIMITER //
 
CREATE PROCEDURE ProductProfit()
BEGIN

   SELECT PRODUCT_ID,PRODUCT_NAME,TOTAL_AMOUNT, (SALE_PRICE-PRIME_COST) AS PROFIT_PER_PRODUCT
   FROM PRODUCT_LIST
   ORDER BY PROFIT_PER_PRODUCT DESC;

END //
 
DELIMITER ;
 


 -- look up the MONTHLY TOTAL SALE of A GIVEN product
 
 DELIMITER //
 
CREATE PROCEDURE ProductMonthlySale(
IN PRODUCT_INPUT_ID TINYINT)
BEGIN

 SELECT P.PRODUCT_ID,P.PRODUCT_NAME, SUM(OP.AMOUNT) AS MONTHLY_SALE,DATE_FORMAT(OI.ORDER_ISSUE_DATE, '%Y-%m') AS YEAR_AND_MONTH
 FROM SALES_ORDER S  LEFT JOIN ORDER_INFO OI ON S.ORDER_ID=OI.ORDER_ID
 LEFT JOIN ORDER_PRODUCT OP ON S.ORDER_ID=OP.ORDER_ID
 RIGHT JOIN PRODUCT_LIST P ON P.PRODUCT_ID=OP.PRODUCT_ID
 WHERE P.PRODUCT_ID=PRODUCT_INPUT_ID
 GROUP BY DATE_FORMAT(OI.ORDER_ISSUE_DATE, '%Y-%m');

END //
 
DELIMITER ;

 


  -- create a new sales order, , since one sales order can contain multiple products, so we first input the basic info, then use another procedure to insert the product info
 
  DELIMITER //

 
	CREATE PROCEDURE AddSalesOrder(
	IN INPUT_EMP_NUM TINYINT,
	IN INPUT_CUSTOMER_ID TINYINT,
	IN INPUT_DEAL_ID TINYINT)
	BEGIN
    
    DECLARE NEW_ORDER_ID TINYINT;
   
   -- FIRST CREATE ORDER_INFO
	INSERT INTO ORDER_INFO(EMP_NUM,ORDER_TYPE)
	VALUES 
	(INPUT_EMP_NUM,'SALE');
    
    -- THEN FIND THE NEWLY CREATED ORDER_ID
    SELECT ORDER_ID 
    INTO NEW_ORDER_ID
    FROM ORDER_INFO
    WHERE EMP_NUM=INPUT_EMP_NUM AND ORDER_TYPE='SALE'
    ORDER BY ORDER_ISSUE_DATE DESC
    LIMIT 1;
    
    
    -- FINALLY CREATE SALES_ORDER
    INSERT INTO  SALES_ORDER(ORDER_ID,DEAL_ID,CUSTOMER_ID)
    VALUES 
	(NEW_ORDER_ID,INPUT_DEAL_ID,INPUT_CUSTOMER_ID);


	END //
	 
	DELIMITER ;


    
-- add one product info into the newest order, if an order contains several different products, then call this procedure multiple times
	DELIMITER //

 
	CREATE PROCEDURE AddOneProductToOrder(
	IN INPUT_PRODUCT_ID TINYINT,
	IN INPUT_PRODUCT_AMOUNT TINYINT,
    IN INPUT_ORDER_TYPE VARCHAR(10),
    IN INPUT_EMP_NUM TINYINT
)
	BEGIN
    
    DECLARE NEW_ORDER_ID TINYINT;
    
    -- THEN FIND THE NEWLY CREATED ORDER_ID
    SELECT ORDER_ID 
    INTO NEW_ORDER_ID
    FROM ORDER_INFO
    WHERE EMP_NUM=INPUT_EMP_NUM AND ORDER_TYPE=INPUT_ORDER_TYPE
    ORDER BY ORDER_ISSUE_DATE DESC
    LIMIT 1;
    
    -- THEN CREATE ORDER_PRODUCT
    INSERT INTO ORDER_PRODUCT VALUES (NEW_ORDER_ID, INPUT_PRODUCT_ID, INPUT_PRODUCT_AMOUNT);


	END //
	 
	DELIMITER ;
   



 
 CREATE VIEW INVENTORY_INFO AS
 SELECT P.PRODUCT_ID, P.PRODUCT_NAME, S.STOR_AMOUNT,S.STOR_SHELF,W.WARE_AMOUNT,W.WARE_SHELF
 FROM PRODUCT_LIST P LEFT JOIN STORE_INVENTORY S ON P.PRODUCT_ID=S.PRODUCT_ID
 LEFT JOIN WAREHOUSE_INVENTORY W ON P.PRODUCT_ID=W.PRODUCT_ID;
 
 


 
 CREATE VIEW OUTBOUND_INFO AS
 SELECT OI.ORDER_ID,OI.ORDER_ISSUE_DATE,P.PRODUCT_ID,P.PRODUCT_NAME,OP.AMOUNT,W.WARE_SHELF,S.STOR_SHELF,concat(E.EMP_FNAME,E.EMP_LNAME) AS ISSUED_BY
 FROM OUTBOUND_ORDER OO  LEFT JOIN ORDER_INFO OI ON  OO.ORDER_ID=OI.ORDER_ID
 LEFT JOIN EMPLOYEE E ON OI.EMP_NUM=E.EMP_NUM
 LEFT JOIN ORDER_PRODUCT OP ON OO.ORDER_ID=OP.ORDER_ID
 LEFT JOIN PRODUCT_LIST P ON OP.PRODUCT_ID=P.PRODUCT_ID
 LEFT JOIN STORE_INVENTORY S ON OP.PRODUCT_ID=S.PRODUCT_ID
 LEFT JOIN WAREHOUSE_INVENTORY W ON OP.PRODUCT_ID=W.PRODUCT_ID;

 
 
 
 
 
 